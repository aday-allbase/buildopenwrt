{#
 Copyright 2022 Jo-Philipp Wich <jo@mein.io>
 Licensed to the public under the Apache License 2.0.
-#}
{%
	include(`themes/${theme}/header`);
-%}
<script src="{{ resource }}/luci.js?v=25.017.24510~d42ec55"></script>
<script src="{{ resource }}/sweetalert2.all.min.js"></script>
<script>
	L = new LuCI({{ replace(`${ {
		media          : media,
		resource       : resource,
		scriptname     : http.getenv("SCRIPT_NAME"),
		pathinfo       : http.getenv("PATH_INFO"),
		documentroot   : http.getenv("DOCUMENT_ROOT"),
		requestpath    : ctx.request_path,
		dispatchpath   : ctx.path,
		pollinterval   : +config.main.pollinterval || 5,
		ubuspath       : config.main.ubuspath || '/ubus/',
		sessionid      : ctx.authsession,
		token          : ctx.authtoken,
		nodespec       : dispatched,
		apply_rollback : max(+config.apply.rollback ||  90, 90),
		apply_holdoff  : max(+config.apply.holdoff  ||   4,  1),
		apply_timeout  : max(+config.apply.timeout  ||   5,  1),
		apply_display  : max(+config.apply.display  || 1.5,  1),
		rollback_token : rollback_token
	} }`, '/', '\\/') }});
</script>
<style>
    .update-info {
        text-align: left;
        margin: 15px 0;
        font-family: Arial, sans-serif;
    }
    .update-info p {
        margin: 8px 0;
        color: #333;
    }
    
    .changelog {
        font-family: Arial, sans-serif;
        font-size: 14px;
        color: #333;
        line-height: 1.6;
        margin-top: 20px;
        padding: 10px;
        border-left: 4px solid #007BFF;
        max-height: 250px;
        overflow-y: auto;
        border-radius: 5px;
    }
    .changelog pre {
        font-family: 'Courier New', monospace;
        white-space: pre-wrap;
        word-wrap: break-word;
        font-size: 14px;
        line-height: 1.5;
    }
    .swal2-popup {
        font-family: Arial, sans-serif;
        max-width: 600px;
    }
    .swal2-title {
        font-size: 1.6em;
        margin-bottom: 15px;
        color: #007BFF;
        background-color: #FFFFFF;
        background: #FFFFFF;
    }
    
    .swal2-html-container {
        background-color: #FFFFFF;
        background: #FFFFFF;
    }
    .swal2-html-container a {
        text-decoration: none;
        color: #007BFF;
    }
    .swal2-html-container a:hover {
        text-decoration: underline;
    }
    .square-wrapper {
        position: fixed;
        right: 20px;
        top: 50%;
        transform: translateY(-50%);
        z-index: 1000;
    }
    .square {
        border: 1px solid #5e42a6;
        height: 26px;
        width: 26px;
        display: block;
        transform: rotate(45deg);
        overflow: hidden;
        cursor: pointer;
        transition: all 500ms cubic-bezier(0.97, 0, 0.395, 0.995);
    }
    .square .burgerwrap {
        height: 18px;
        width: 21px;
        transform: rotate(-45deg);
        padding-left: 2px;
        padding-top: 8px;
        transition: all 500ms cubic-bezier(0.97, 0, 0.395, 0.995);
    }
    .square:hover {
        transform: rotate(135deg);
        border: 1px solid rgb(61, 14, 230);
    }
    .square:hover .burgerwrap {
        transform: rotate(-135deg);
    }
    .square span {
        height: 2px;
        width: 14px;
        background: linear-gradient(145deg, #5e42a6, #b46be4);
        display: block;
        margin-bottom: 2px;
        transition: all 500ms cubic-bezier(0.97, 0, 0.395, 0.995);
    }
    .square span:after {
        content: "";
        height: 2px;
        width: 14px;
        position: absolute;
        background: rgb(61, 14, 230);
        left: -22px;
        margin-top: -4px;
        transition: all 500ms cubic-bezier(0.97, 0, 0.395, 0.995);
    }
    .square:hover span {
        margin-left: 26px;
    }
    .square:hover span:after {
        left: 0.2px;
    }
    .square span:nth-of-type(1),
    .square span:nth-of-type(1):after {
        transition-delay: 0.1s;
    }
    .square span:nth-of-type(2),
    .square span:nth-of-type(2):after {
        transition-delay: 0.2s;
    }
    .square span:nth-of-type(3),
    .square span:nth-of-type(3):after {
        transition-delay: 0.3s;
    }
</style>

<script>

// ====== Global Functions ======
function enqueueAlert(alertConfig) {
    AlertSystem.enqueueAlert(alertConfig);
}

function showProfile() {
    enqueueAlert({
        width: 400,
        title: "About Me!",
        text: "Halo! Saya Rizki Kotet, seorang programmer pemula yang belajar C# dan PHP. Saya memiliki pemahaman dasar tentang front-end dan back-end. Saat ini, saya sedang mengerjakan proyek Custom OpenWrt dan ImmortalWrt. Saya selalu bersemangat untuk belajar hal baru di dunia teknologi!",
        imageUrl: "{{ resource }}/Profile.jpeg",
        imageWidth: 200,
        imageHeight: 200,
        imageAlt: "Profile",
        allowOutsideClick: false,
        footer: `
            <p style="text-align: center;">
                <a href="https://t.me/rtawrt"><img alt="Channel" src="{{ resource }}/Channel.svg" width="110" height="30"></a>
                <a href="https://t.me/backup_rtawrt"><img alt="Group" src="{{ resource }}/Group.svg" width="110" height="30"></a>
                <a href="https://t.me/RizkiKotet"><img alt="Personal" src="{{ resource }}/Personal.svg" width="110" height="30"></a>
            </p>
        `
    });
}

// ====== Constants ======
const CONFIG = {
    APP: {
        name: 'RTA-WRT',
        baseOpenwrt: 'null',
        currentBranch: 'null',
        currentVersion: 'null',
        currentFitur: 'null',
        checkInterval: 5 * 60 * 1000, // 5 minutes
        offlineRetryInterval: 30 * 1000, // 30 seconds
        maxRetryAttempts: 3,
        cacheExpiration: 24 * 60 * 60 * 1000, // 24 hours
    },
    URLS: {
        info: 'https://raw.githubusercontent.com/rizkikotet-dev/RTA-WRT/refs/heads/info/informasi.txt',
        getVersion() {
            return `https://raw.githubusercontent.com/rizkikotet-dev/RTA-WRT/refs/heads/info/${this.APP.currentBranch}/${this.APP.baseOpenwrt}/${this.APP.currentFitur}/version.txt`;
        },
        getChangelog() {
            return `https://raw.githubusercontent.com/rizkikotet-dev/RTA-WRT/refs/heads/info/${this.APP.currentBranch}/${this.APP.baseOpenwrt}/${this.APP.currentFitur}/changelog.txt`;
        },
        internetCheck: 'https://www.google.com/favicon.ico'
    },
    SOCIAL: {
        channel: 'https://t.me/rtawrt',
        group: 'https://t.me/backup_rtawrt',
        personal: 'https://t.me/RizkiKotet'
    }
};

// ====== State Management ======
class StateManager {
    constructor() {
        this.today = new Date().toDateString();
        this.cache = {
            content: localStorage.getItem('lastInformation') || '',
            lastUpdate: localStorage.getItem('lastUpdate') || ''
        };
        this.alertQueue = [];
        this.isAlertShowing = false;
        this.checkTimer = null;
        this.connectionState = {
            isOnline: true,
            lastCheck: Date.now()
        };
    }

    static getInstance() {
        if (!StateManager.instance) {
            StateManager.instance = new StateManager();
        }
        return StateManager.instance;
    }

    updateConnectionState(isOnline) {
        this.connectionState.isOnline = isOnline;
        this.connectionState.lastCheck = Date.now();
    }
}

// ====== Cache Manager ======
class CacheManager {
    static CACHE_KEYS = {
        INFO: 'cache_info',
        VERSION: 'cache_version',
        CHANGELOG: 'cache_changelog',
        TIMESTAMPS: 'cache_timestamps'
    };

    static async get(key) {
        const cacheData = StorageUtils.get(key);
        const timestamps = JSON.parse(StorageUtils.get(this.CACHE_KEYS.TIMESTAMPS) || '{}');
        
        if (!cacheData || !timestamps[key]) return null;
        
        // Check if cache has expired
        if (Date.now() - timestamps[key] > CONFIG.APP.cacheExpiration) {
            this.remove(key);
            return null;
        }
        
        return cacheData;
    }

    static set(key, value) {
        StorageUtils.save(key, value);
        const timestamps = JSON.parse(StorageUtils.get(this.CACHE_KEYS.TIMESTAMPS) || '{}');
        timestamps[key] = Date.now();
        StorageUtils.save(this.CACHE_KEYS.TIMESTAMPS, JSON.stringify(timestamps));
    }

    static remove(key) {
        StorageUtils.remove(key);
        const timestamps = JSON.parse(StorageUtils.get(this.CACHE_KEYS.TIMESTAMPS) || '{}');
        delete timestamps[key];
        StorageUtils.save(this.CACHE_KEYS.TIMESTAMPS, JSON.stringify(timestamps));
    }
}

// ====== Connection Manager ======
class ConnectionManager {
    static retryCount = 0;
    static isOnline = true;

    static async checkConnection() {
        try {
            await fetch(CONFIG.URLS.internetCheck, { 
                mode: "no-cors",
                cache: 'no-store',
                timeout: 5000
            });
            this.retryCount = 0;
            if (!this.isOnline) {
                this.isOnline = true;
                ConnectionManager.dispatchConnectionChange(true);
            }
            return true;
        } catch {
            if (this.isOnline) {
                this.isOnline = false;
                ConnectionManager.dispatchConnectionChange(false);
            }
            return false;
        }
    }

    static dispatchConnectionChange(isOnline) {
        window.dispatchEvent(new CustomEvent('connectionChange', { 
            detail: { isOnline } 
        }));
    }

    static async retryWithBackoff(operation, maxRetries = CONFIG.APP.maxRetryAttempts) {
        for (let i = 0; i < maxRetries; i++) {
            try {
                return await operation();
            } catch (error) {
                if (i === maxRetries - 1) throw error;
                await new Promise(resolve => 
                    setTimeout(resolve, Math.min(1000 * Math.pow(2, i), 10000))
                );
            }
        }
    }
}

// ====== Network Utilities ======
class NetworkUtils {
    static async fetchText(url, useCache = true) {
        try {
            const response = await fetch(url, { cache: 'no-store' });
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const text = await response.text();
            
            // Cek jika konten berubah sebelum menyimpan ke cache
            const cachedData = await CacheManager.get(url);
            if (cachedData !== text) {
                CacheManager.set(url, text);
            }

            return text;
        } catch (error) {
            console.error(`Error fetching ${url}:`, error);
            return useCache ? await CacheManager.get(url) : null;
        }
    }

    static async checkInternetConnection() {
        return ConnectionManager.checkConnection();
    }
}

// ====== Alert System ======
class AlertSystem {
    static async enqueueAlert(alertConfig) {
        const state = StateManager.getInstance();
        state.alertQueue.push(alertConfig);
        await this.processQueue();
    }

    static async processQueue() {
        const state = StateManager.getInstance();
        if (state.isAlertShowing || state.alertQueue.length === 0) return;

        state.isAlertShowing = true;
        const alertConfig = state.alertQueue.shift();

        try {
            const result = await Swal.fire(alertConfig);
            if (result.isConfirmed && alertConfig.onConfirm) await alertConfig.onConfirm(result);
            if (result.isDenied && alertConfig.onDenied) await alertConfig.onDenied(result);
        } catch (error) {
            console.error('Error processing alert:', error);
        } finally {
            state.isAlertShowing = false;
            await this.processQueue();
        }
    }
}

// ====== Storage Utilities ======
class StorageUtils {
    static save(key, value) {
        try {
            localStorage.setItem(key, value);
            return true;
        } catch (error) {
            console.error(`Storage error: ${error}`);
            return false;
        }
    }

    static get(key) {
        return localStorage.getItem(key);
    }

    static remove(key) {
        localStorage.removeItem(key);
    }
}

// ====== Information Manager ======
class InformationManager {
    static async checkInformation() {
        const state = StateManager.getInstance();
        
        if (!await NetworkUtils.checkInternetConnection()) {
            const cachedInfo = await CacheManager.get(CONFIG.URLS.info);
            if (cachedInfo && cachedInfo !== state.cache.content) {
                this.showInformationAlert(cachedInfo);
            }
            return;
        }

        const infoContent = await NetworkUtils.fetchText(CONFIG.URLS.info);
        if (infoContent && infoContent !== state.cache.content && !this.isAlertShownToday()) {
            this.showInformationAlert(infoContent);
        }
    }

    static async showInformationAlert(infoContent) {
        const state = StateManager.getInstance();
        await AlertSystem.enqueueAlert({
            title: '🚀 Informasi',
            width: 400,
            html: `
                <div class="changelog" style="margin-top: 15px; text-align: left; white-space: pre-line;">
                    <div>${infoContent}</div>
                </div>
            `,
            icon: 'info',
            confirmButtonText: 'Mengerti',
            cancelButtonText: '❌ Tutup',
            onConfirm: () => {
                StorageUtils.save('lastInformation', infoContent);
                StorageUtils.save('lastInformationDate', state.today);  // Save the date when the alert is shown
                state.cache.content = infoContent;
                state.cache.lastUpdate = new Date().toISOString();
            }
        });
    }

    static isAlertShownToday() {
        const lastInformationDate = StorageUtils.get('lastInformationDate');
        const state = StateManager.getInstance();
        return lastInformationDate === state.today;
    }
}

// ====== Update Manager ======
class UpdateManager {
    static formatChangelog(changelogRaw) {
        if (!changelogRaw) return 'Tidak ada catatan perubahan.';
        
        const match = changelogRaw.match(/\*\*Changelog\*\* \((.*?)\)\n([\s\S]*?)(?=\*\*Changelog\*\*|$)/);
        if (!match) return changelogRaw;
        
        return `<strong>Changelog (${match[1]})</strong><p>${match[2].trim().replace(/-\s/g, '• ').replace(/\n/g, '<br>')}</p>`;
    }

    static async checkForUpdates() {
        const state = StateManager.getInstance();
        if (StorageUtils.get('mdl_update') === state.today) return;

        if (!await NetworkUtils.checkInternetConnection()) {
            const [cachedVersion, cachedChangelog] = await Promise.all([
                CacheManager.get(CONFIG.URLS.getVersion.call(CONFIG)),
                CacheManager.get(CONFIG.URLS.getChangelog.call(CONFIG))
            ]);
            
            if (cachedVersion && cachedVersion.trim() !== CONFIG.APP.currentVersion) {
                await this.showUpdateAlert(cachedVersion.trim(), this.formatChangelog(cachedChangelog));
            }
            return;
        }

        try {
            const [latestVersion, changelogRaw] = await Promise.all([
                NetworkUtils.fetchText(CONFIG.URLS.getVersion.call(CONFIG)),
                NetworkUtils.fetchText(CONFIG.URLS.getChangelog.call(CONFIG))
            ]);

            if (!latestVersion) {
                console.log('No version information available');
                return;
            }

            if (latestVersion.trim() === CONFIG.APP.currentVersion) {
                console.log('Already on latest version');
                return;
            }

            const changelog = this.formatChangelog(changelogRaw);
            await this.showUpdateAlert(latestVersion.trim(), changelog);
        } catch (error) {
            console.error('Update check failed:', error);
        }
    }

    static async showUpdateAlert(latestVersion, changelog) {
        const state = StateManager.getInstance();
        await AlertSystem.enqueueAlert({
            title: '🚀 Update Tersedia!',
            width: 400,
            html: `
                <div class="update-info" style="text-align: center;">
                    <div class="changelog" style="margin-top: 15px; text-align: left;">
                        <h4 style="color: #007BFF; background-color: #FFFFFF;">📋 Changelog:</h4>
                        <div>${changelog}</div>
                    </div>
                </div>
            `,
            showCancelButton: true,
            showDenyButton: true,
            confirmButtonText: '🔄 Update',
            denyButtonText: '⏳ Nanti',
            cancelButtonText: '❌ Batal',
            onConfirm: () => {
                window.open('https://github.com/rizkikotet-dev/RTA-WRT/releases', '_blank');
                StorageUtils.save('mdl_update', state.today);
            },
            onDenied: () => StorageUtils.save('mdl_update', state.today)
        });
    }
}

// ====== Daily Modal Manager ======
class DailyModalManager {
    static async showDailyModal() {
        const state = StateManager.getInstance();
        if (StorageUtils.get('mdl_Saweria') === state.today) return;

        await AlertSystem.enqueueAlert({
            title: `🚀 Welcome To ${CONFIG.APP.name}`,
            width: 400,
            imageUrl: "{{ resource }}/Saweria.png",
            imageWidth: 200,
            imageHeight: 200,
            imageAlt: "Saweria",
            html: `
                <p style="text-align: center;">
                    <a href="${CONFIG.SOCIAL.channel}" target="_blank"><img alt="Channel" src="{{ resource }}/Channel.svg" width="110" height="20"></a>
                    <a href="${CONFIG.SOCIAL.group}" target="_blank"><img alt="Group" src="{{ resource }}/Group.svg" width="110" height="20"></a>
                    <a href="${CONFIG.SOCIAL.personal}" target="_blank"><img alt="Personal" src="{{ resource }}/Personal.svg" width="110" height="20"></a>
                </p>
                <div style="margin-top: 10px; text-align: center;">
                    <input type="checkbox" id="noShowToday">
                    <style>
                        #noShowToday:checked { background-color: #5e72e4 !important; }
                    </style>
                    <label for="noShowToday">Jangan tampilkan lagi hari ini</label>
                </div>
            `,
            confirmButtonText: 'OK',
            allowOutsideClick: false,
            didOpen: () => {
                document.getElementById('noShowToday').addEventListener('change', event => {
                    if (event.target.checked) {
                        StorageUtils.save('mdl_Saweria', state.today);
                    } else {
                        StorageUtils.remove('mdl_Saweria');
                    }
                });
            }
        });
    }
}

// ====== Application Controller ======
class AppController {
    static async initialize() {
        const state = StateManager.getInstance();
        
        // Pastikan fungsi setupConnectionHandling tersedia
        await AppController.setupConnectionHandling();  
        
        // Setup event listeners
        AppController.setupEventListeners();
        
        // Initial checks if online
        if (ConnectionManager.isOnline) {
            await DailyModalManager.showDailyModal();
            await UpdateManager.checkForUpdates();
            await AppController.startInformationChecker();
        }
    }

    static async setupConnectionHandling() {
        await ConnectionManager.checkConnection();
        
        // Setup periodic connection checking
        setInterval(async () => {
            if (!ConnectionManager.isOnline) {
                const isNowOnline = await ConnectionManager.checkConnection();
                if (isNowOnline) {
                    await AppController.startInformationChecker();
                }
            }
        }, CONFIG.APP.offlineRetryInterval);
    }

    static async startInformationChecker() {
        const state = StateManager.getInstance();
        if (state.checkTimer) clearInterval(state.checkTimer);
        
        await InformationManager.checkInformation();
        state.checkTimer = setInterval(
            () => InformationManager.checkInformation(),
            CONFIG.APP.checkInterval
        );
    }

    static setupEventListeners() {
        // Handle visibility change
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'visible' && ConnectionManager.isOnline) {
                AppController.startInformationChecker();
            } else {
                clearInterval(StateManager.getInstance().checkTimer);
            }
        });

        // Handle connection changes
        window.addEventListener('connectionChange', async (event) => {
            if (event.detail.isOnline) {
                await AppController.startInformationChecker();
            } else {
                clearInterval(StateManager.getInstance().checkTimer);
            }
        });
    }
}

// ====== Initialize Application ======
document.addEventListener('DOMContentLoaded', () => AppController.initialize());

</script>

<div class="square-wrapper">
    <div class="square" onclick="showProfile()">
        <div class="burgerwrap">
            <span></span>
            <span></span>
            <span></span>
        </div>
    </div>
</div>